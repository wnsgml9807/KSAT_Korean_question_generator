| 파라미터       | 값                                           | 비고             |
| ---------- | ------------------------------------------- | -------------- |
| Base model | `gpt-4.1-2025-04-14`                        | 2025-Q2 공개     |
| Epochs     | 3 (*auto*)                                  | 데이터 소량, 과적합 방지 |
| Batch / LR | auto / default                              |                |
| Run ID     | `ft:gpt-4.1-…:ksat-agent-passage-editor-v2` |                |

**결과 지표**

| Metric          | 값         |
| --------------- | --------- |
| Train loss      | **0.274** |
| Valid loss      | **0.255** |
| Full valid loss | 0.302     |

(loss gap ≈ 0.02 → 안정 수렴)

---

#### ③ Inference 파라미터 (안정 preset)

```python
gen_cfg = {
    "model": "ft:gpt-4.1-ksat-agent-passage-editor-v2",
    "temperature": 0.30,
    "top_p": 0.85,
    "repetition_penalty": 1.2,
    "max_tokens": 1200,
}
```

* `temperature 0.5` : 논리 일관성↑
* `top_p 0.85`      : 기본값에 비해 보수적으로 책정하여 문체 일관성↑
* `repetition_penalty 1.2` : 꼬리 반복 현상상 90 %↓

---

#### ④ 정량적 개선 결과

| 지표                 | 프롬프트 Only | Fine-Tune 후 | 개선폭    |
| ------------------ | --------- | ----------- | ------ |
| 단락별 "정의→인과→비교" 완성률 | 38 %      | **71 %**    | +33 %p |
| 매력적 오답(값·조건 교란) 비율 | 42 %      | **88 %**    | +46 %p |
| 중복·불필요 문장 비중       | 12 %      | **3 %**     | -9 %p  |
| 수능 전문가 총점(5점 만점)   | 3.0       | **4.5**     | +1.5   |

---

#### ⑤ 주요 이슈 & 해결책

| 이슈                                 | 해결 방법                                  |
| ---------------------------------- | -------------------------------------- |
| 동일 문장, 문단 반복                       | `repetition_penalty=1.2` + Top-k 노드 필터 |
| 이상한 문자열이 출력되는 현상                      | `temperature=0.6` 하향 조정 |




---

### 7️⃣ 서버 아키텍처

#### 7.1 다중 사용자 세션 관리

다중 사용자 환경에서 각 사용자의 작업 상태를 안전하게 관리하기 위해 세 가지 핵심 요소를 도입했습니다:

| 요소 | 사용 기술 | 주요 기능 |
|------|-----------|----------|
| **대화 상태** | `MultiAgentState` (`TypedDict`) | 에이전트 간 메시지·요약·검색 결과를 단일 객체로 공유 |
| **세션 DB** | `AsyncSqliteSaver` | Stream lit 다중 사용자 환경에서 세션별 체크포인트 유지 |
| **만료 정리** | `cleanup_old_sessions()` | 24 시간 후 SQLite 파일 자동 삭제로 디스크 사용 최소화 |

이를 통해 여러 사용자가 동시에 시스템을 사용해도 각 작업이 완전히 분리되어 관리되며, 

만약 작업 중 오류가 발생하더라도 서버 DB에 저장된 세션을 불러와 마지막 체크포인트부터 작업을 재개할 수 있습니다:

```python
# 각 사용자별 독립된 세션 데이터베이스 생성
memory = await aiosqlite.connect(f"sessions/{user_id}_{timestamp}.db")
saver  = AsyncSqliteSaver(memory)
await saver.setup()          # 필요한 테이블 자동 생성

# 중요 작업 단계마다 상태 스냅샷 저장
await saver.flush(state)     # 체크포인트 생성
```


#### 7.2 실시간 스트리밍 구현

작업 시간이 5-10분 정도 소요되는 시스템에서는 사용자에게 진행 상황을 실시간으로 보여주는 것이 중요합니다. 

이를 위해 FastAPI의 스트리밍 기능과 LangGraph의 `astream` 기능을 결합했습니다:

```python
@app.post("/chat/stream")
async def chat_stream_endpoint(request: ChatRequest):
    """실시간으로 에이전트 작업 과정을 스트리밍합니다"""
    async def event_generator():
        # 각 에이전트의 작업 과정을 실시간으로 스트림으로 전송
        async for item in stream_agent_response(request):
            # 줄바꿈을 추가해 클라이언트가 각 이벤트를 구분할 수 있게 함
            yield item + "\n"
    
    # 브라우저에 지속적인 연결 유지를 위한 헤더 설정
    return StreamingResponse(
        event_generator(),
        media_type="application/json",
        headers={
            "Cache-Control": "no-cache",  # 캐싱 방지
            "Connection": "keep-alive",   # 연결 유지
        }
    )
```

이 구현을 통해 사용자는 실시간 진행 상황을 토큰 단위로 확인할 수 있습니다.

서버-클라이언트 간 데이터 전송을 위해 SSE(Server-Sent Events) 대신 단순 JSON 라인 형식을 채택하여 토큰 단위 전송-파싱 과정을 단순화했습니다.

#### 7.3 운영 환경

KSAT Agent 백엔드 시스템은 안정적이고 확장 가능한 운영을 위해 다음과 같은 환경으로 구성되어 있습니다.

*   **실행 환경**: 애플리케이션은 Docker 컨테이너로 패키징되어, GCP (Google Cloud Platform) Compute Engine VM 인스턴스에서 실행했습니다다. 이를 통해 개발 환경과 운영 환경의 일관성을 유지할 수 있게 되었습니다.

*   **프로세스 관리**: 컨테이너 내부에서는 Supervisor가 메인 애플리케이션 서버 프로세스(Uvicorn 기반 FastAPI 서버)를 관리합니다. Supervisor는 애플리케이션의 예상치 못한 종료 시 자동으로 재시작합니다.

*   **지속적 통합 및 배포 (CI/CD)**: GitHub Actions를 활용하여 CI/CD 파이프라인을 구축했습니다. GitHub에 코드가 push되면, GitHub Actions가 자동으로 VM 서버에 접속하여 최신 코드를 가져오고, Docker 이미지를 재빌드한 후 컨테이너를 재시작합니다. 

*   **인프라 구성**:
    *   **Dockerfile**: 애플리케이션 실행에 필요한 모든 종속성(Python 버전, 라이브러리 등)과 환경 설정을 정의합니다.
    *   **docker-compose.yaml**: Docker 컨테이너의 빌드 방식, 포트 매핑, 볼륨 설정, 재시작 정책 등을 정의했습니다.
    *   **supervisord.conf**: Supervisor가 관리할 프로세스의 실행 명령어, 자동 시작/재시작 정책, 로그 경로 등을 설정했습니다.
    *   **.env**: API 키와 같은 민감한 환경 변수를 관리합니다. Github에 업로드되지 않고 별도로 직접 관리합니다.

---
### 8️⃣ 맺음말

KSAT Agent는 기존 출제 프로세스를 상당 부분 효율화할 수 있을 것으로 기대합니다. 투입 비용을 낮춤으로써, 양질의 문항이 저렴한 가격에 공급될 수 있기를 바랍니다. 

KSAT Agent가 교사와 학생들에게 실질적인 이로움을 가져다 주고, 나아가 교육 콘텐츠 제작의 패러다임을 바꾸는 계기가 되면 좋겠습니다. 

감사합니다.


<br>
<br>

### :bulb: 부록 : # 개념 지도 스키마 v6.0 매뉴얼
*수능 독서 고난도 지문 설계를 위한 통합 프레임워크*

## 1. 개요 및 필요성

개념 지도 v6.0은 수능 독서 지문의 **내용적 구조**와 **서술적 구조**를 통합적으로 설계하기 위한 프레임워크입니다. v5.0이 개념 간 관계 구조에 초점을 맞추었다면, v6.0은 여기에 내러티브 흐름과 텐션을 결합하여 더욱 정교한 지문 설계를 가능하게 합니다.

### 필요성

1. **평면적 지문 극복**: 단순히 개념들을 나열하는 평면적 서술에서 벗어나 입체적이고 유기적인 지문 설계 가능
2. **변별력 강화**: 상위권 학생들을 변별할 수 있는 텐션 구조와 암시적 논리 관계 설계 
3. **통합적 접근**: 지문의 "무엇을"(개념)과 "어떻게"(서술 방식)를 동시에 설계하는 체계 제공
4. **문항 설계 연계**: 다양한 난이도와 유형의 문항을 효과적으로 설계할 수 있는 기초 제공

## 2. v5.0에서 v6.0으로의 주요 변경점

| 구분 | v5.0 | v6.0 |
|------|------|------|
| **구조** | 단일 계층 구조 (개념 노드-엣지) | **이중 계층 구조** (문단 노드-엣지 + 개념 노드-엣지) |
| **내러티브** | 미지원 | **내러티브 패턴, 텐션 곡선** 지원 |
| **개념 엣지** | 엣지 타입-레이블 체계 | 기존 체계 + **명시적/암시적 구분, 난이도 분류** |
| **시각화** | 개념 그래프 | 개념 그래프 + **문단 흐름도, 텐션 곡선** |
| **문단 구조** | 미지원 | **문단 역할, 텐션 수치** 지원 |
| **표준 형식** | JSON | JSON (확장형) |

## 3. 이중 계층 구조

v6.0의 핵심은 **이중 계층 구조**로, 지문을 거시적(문단 레벨)과 미시적(개념 레벨) 관점에서 동시에 설계할 수 있습니다.

```
[지문]
  ├── [문단1] --- [문단2] --- [문단3] --- [문단4]  # 문단 노드-엣지 (거시적 구조)
  │     │           │           │           │
  │     ▼           ▼           ▼           ▼
  │  [개념A]      [개념D]      [개념G]      [개념J]  
  │     │           │           │           │
  │  [개념B] --- [개념E] --- [개념H] --- [개념K]  # 개념 노드-엣지 (미시적 구조)
  │     │           │           │           │
  │  [개념C]      [개념F]      [개념I]      [개념L]
```

이 구조는 다음과 같은 이점을 제공합니다:
- 문단 간 논리적 흐름과 개념 간 관계를 분리하여 설계
- 문단 내 개념 밀도와 텐션을 통제하여 난이도 조절
- 전체 지문의 내러티브 구조와 텐션 곡선 설계

## 4. 문단 노드 속성 및 구조

문단 노드는 지문의 거시적 구조를 구성하는 기본 단위로, 다음과 같은 속성을 가집니다:

```json
{
  "id": "p1",                  // 문단 식별자
  "order": 1,                  // 문단 순서
  "role": "intro",             // 문단 역할
  "tension_level": 2,          // 텐션 수치 (1-5)
  "description": "개념 소개",   // 문단 내용 요약
  "contains_nodes": ["n1", "n2", "n3"],  // 포함된 개념 노드 ID
  "primary_concept": "n1"      // 핵심 개념 노드 ID
}
```

### 문단 역할 유형

| 역할 | 설명 | 주요 기능 |
|------|------|----------|
| **intro** | 도입 | 주제 소개, 배경 설명, 문제 제기 |
| **define** | 정의 | 핵심 개념 정의, 용어 설명 |
| **explain** | 설명 | 원리 분석, 관계 설명, 메커니즘 해설 |
| **contrast** | 대조 | 상반된 관점 비교, 차이점 분석 |
| **exemplify** | 예시 | 구체적 사례 제시, 적용 예 소개 |
| **extend** | 확장 | 개념 심화, 추가 논점 소개 |
| **challenge** | 도전 | 한계 지적, 반론 제시, 문제 제기 |
| **synthesize** | 종합 | 논점 통합, 결론 도출 |
| **conclude** | 결론 | 요약, 의의 및 시사점 제시 |

## 5. 문단 엣지 유형

문단 엣지는 문단 간의 논리적 연결을 나타냅니다:

```json
{
  "source_id": "p1",
  "target_id": "p2",
  "type": "builds_upon"
}
```

### 문단 엣지 유형

| 유형 | 설명 | 예시 연결 |
|------|------|----------|
| **builds_upon** | 앞 문단의 내용 발전/심화 | 정의 → 상세 설명 |
| **contrasts_with** | 대조적 관점/현상 제시 | A이론 → B이론 |
| **introduces_problem** | 문제 제기 | 현상 → 문제점 |
| **provides_solution** | 해결책 제시 | 문제점 → 해결방안 |
| **exemplifies** | 구체적 사례/적용 제시 | 이론 → 사례 |
| **shifts_perspective** | 관점 전환 | 기술적 → 윤리적 |
| **specifies_condition** | 조건/한계 명시 | 일반론 → 예외/조건 |
| **concludes_from** | 앞 내용에서 결론 도출 | 논증 → 결론 |

## 6. 개념 노드 및 엣지 유형

개념 노드와 엣지는 v5.0의 체계를 유지하며, 다음과 같은 속성을 가집니다:

```json
// 개념 노드
{
  "id": "n1",
  "label": "개념명",
  "type": "concept",
  "tier": "core",           // core/support
  "paragraph_id": "p1",     // 소속 문단 ID (v6.0 추가)
  "discourse_role": "claim" // 담론 역할
}

// 개념 엣지
{
  "source_id": "n1",
  "target_id": "n2",
  "type": "Causality",
  "label": "causes",
  "explicitness": "explicit",  // explicit/implicit (v6.0 추가)
  "complexity": "medium",      // low/medium/high (v6.0 추가)
  "supporting_sentence": "..."
}
```

## 7. 암시적/명시적 엣지 구분 (및 문제/해설 연관성)

v6.0에서는 개념 엣지를 **명시적(explicit)**과 **암시적(implicit)**으로 구분합니다. 이 구분은 지문 내용뿐만 아니라, **연계된 문제와 해설을 통해 그 중요성과 추론 필요성이 드러나는지 여부**를 종합적으로 고려하여 판단해야 합니다.

-   **명시적 엣지 (Explicit Edge)**:
    -   **정의**: 텍스트(지문)에 두 개념 간의 관계가 직접적으로 언급된 경우입니다. (예: "A는 B를 유발한다", "X는 Y의 한 종류이다")
    -   **판단 기준**: 지문 내용만으로 관계를 명확히 파악할 수 있습니다.
    -   **JSON 표현**:
        -   `explicitness`: "explicit"
        -   `supporting_sentence`: 지문에서 해당 관계를 직접 보여주는 문장(들). (필수)
        -   `inference_basis`: `null` 또는 생략.

-   **암시적 엣지 (Implicit Edge)**:
    -   **정의**: 텍스트(지문)에 두 개념 간의 관계가 직접 명시되지는 않았으나, 독자가 문맥, 배경지식, 또는 **연계된 문제나 해설을 통해 추론해야 하는 관계**입니다. 수능 국어 독해의 변별력은 주로 이러한 암시적 관계의 파악 능력에서 비롯됩니다.
    -   **판단 기준**:
        1.  지문 내 여러 정보를 종합해야 추론 가능함.
        2.  **문제가 해당 관계의 이해를 직접적으로 요구함.** (예: <보기>를 적용하여 지문의 특정 개념과 연결 짓도록 요구, 두 개념 간의 숨겨진 전제를 파악하도록 유도)
        3.  **해설에서 해당 관계를 중요한 추론 과정으로 설명함.**
    -   **JSON 표현**:
        -   `explicitness`: "implicit"
        -   `supporting_sentence`: `null` 또는 생략.
        -   `inference_basis`: (선택적이지만 권장)
            -   추론의 근거가 되는 **지문 내** 특정 문장(들)의 식별자 리스트 (예: `["p1-s2", "p2-s1"]`).
            -   만약 주된 추론 근거가 문제 또는 해설에 있다면, 현재 스키마에서는 `inference_basis`에 직접 기록하기 어려우므로, 이 필드는 지문 내 근거가 없을 시 `null`로 둘 수 있습니다. 그러나 해당 관계가 문제/해설과 연관되어 \\\'implicit\\\'으로 판단되었음은 명확히 인지되어야 합니다. (LLM은 이 점을 시스템 프롬프트 지시에 따라 처리)

```json
// 명시적 엣지 예시 (기존 예시 유지 또는 수정)
{
  "source_id": "n1",
  "target_id": "n2",
  "type": "Causality",
  "label": "causes",
  "explicitness": "explicit",
  "complexity": "medium", 
  "supporting_sentence": "A는 B를 유발한다."
}

// 암시적 엣지 예시 (기존 예시 유지 또는 수정)
{
  "source_id": "n3",
  "target_id": "n4",
  "type": "Evaluation",
  "label": "views_as",
  "explicitness": "implicit",
  "complexity": "high",
  "inference_basis": ["p2-s3", "p3-s1"]  // 추론의 근거가 되는 지문 내 문장
}
```

### 암시적 엣지의 중요성

암시적 엣지는 상위권 학생들을 변별하는 핵심 요소로, 다음과 같은 기능을 합니다:

1.  **추론 역량 측정**: 명시되지 않은 논리적 연결을 파악하는 능력 요구
2.  **문항 소재 제공**: 추론형, 적용형 문항의 핵심 소재로 활용
3.  **실제 학술 텍스트 반영**: 실제 전문적 텍스트의 논리적 특성 반영

## 8. 텐션 수치 설계 및 영향

텐션 수치는 문단 단위의 정보 밀도와 추론 부담 수준을 1-5 척도로 정량화한 값입니다:

### 텐션 수치별 특성

| 텐션 수치 | 문단 특성 | 개념 노드/엣지 영향 |
|---------|---------|-------------------|
| **1** (낮음) | • 기본 개념 소개<br>• 배경 설명<br>• 친절한 서술 | • 소수의 핵심 노드(2-3개)<br>• 단순한 엣지 유형<br>• 암시적 엣지 없음 |
| **2** (기본) | • 개념 확장<br>• 맥락 제공<br>• 구체적 예시 | • 중간 수준 노드(3-5개)<br>• 일반적 엣지 유형<br>• 암시적 엣지 20% 미만 |
| **3** (중간) | • 개념 응용<br>• 일부 추론 요구<br>• 복합 개념 도입 | • 다양한 노드(5-7개)<br>• 다양한 엣지 유형<br>• 암시적 엣지 30% |
| **4** (높음) | • 다중 관점 제시<br>• 대조적 내용<br>• 추상화 수준 높음 | • 복잡한 노드 구조(7-9개)<br>• 고급 엣지 유형<br>• 암시적 엣지 50% |
| **5** (매우 높음) | • 통합적 재구성<br>• 심층적 함의<br>• 높은 추론 요구 | • 긴밀히 연결된 다수 노드(8-10개+)<br>• 복합 엣지 패턴<br>• 암시적 엣지 70% |

### 텐션 곡선 패턴

전체 지문의 텐션 분포를 설계하는 패턴:

| 패턴 | 텐션 분포 | 효과 |
|------|---------|------|
| **점진적 상승** | [1→2→3→4→5] | 점층적 이해 요구, 고난도 결론 |
| **클라이맥스형** | [2→3→5→4→2] | 핵심 난제 후 해소 |
| **교차형** | [2→4→2→5→3] | 긴장-이완 교차로 독해 피로 방지 |
| **단계형** | [2→2→4→4→5] | 난이도 단계 뚜렷, 평탄구간 제공 |
| **심층부 집중** | [1→2→5→5→3] | 중심부에 핵심 정보 밀집 |

## 9. 개념 엣지 난이도 분류

v6.0에서는 개념 엣지를 난이도에 따라 분류합니다:

### 난이도별 엣지 유형

| 난이도 | 엣지 유형 | 특징 |
|-------|---------|------|
| **초급** | • Definition<br>• Classification<br>• Property<br>• Composition<br>• Example | • 직관적 이해 가능<br>• 단순한 논리 관계<br>• 명시적 표현이 대부분 |
| **중급** | • Causality<br>• Purpose<br>• Comparison<br>• Temporal<br>• Spatial<br>• Reference<br>• Conditional | • 2단계 추론 필요<br>• 영역 특수적 지식 활용<br>• 부분적 암시적 표현 |
| **고급** | • Argumentation<br>• CounterCausality<br>• Exception<br>• Modality<br>• Methodology<br>• Hierarchy<br>• Evaluation<br>• QuantComparison | • 다단계 추론 요구<br>• 전문적 사고 체계 필요<br>• 대부분 암시적 표현 |

## 10. 내러티브 패턴 템플릿

지문 전체의 내러티브 구조를 설계하기 위한 템플릿:

### 내러티브 패턴 유형

| 패턴 | 문단 구성 | 적합한 주제 |
|------|---------|-------------|
| **문제-해결** | 현상 소개→문제 제기→해결 과정→결론/의의 | 과학 기술, 사회 문제 |
| **대조-종합** | 개념 도입→관점A→관점B→비교/대조→종합/평가 | 철학, 인문학적 논쟁 |
| **시간적 전개** | 배경→발전 과정→현재→미래 전망 | 역사, 기술 발전사 |
| **논증 구조화** | 주장→근거→반론→재반박→결론 | 윤리, 법학, 사회 논쟁 |
| **개념 심화** | 기본 정의→세부 요소→작동 원리→한계/예외→응용 | 자연과학, 공학 |

## 11. JSON 스키마 예시

전체 지문의 개념 지도 v6.0 표현 예시:

```json
{
  "$schema": "https://kice-graph.org/schema/v6.0",
  "graph_id": "2026_06_section_8_11",
  "document_source": {
    "title": "인공지능의 윤리적 문제",
    "domain": "기술",
    "subdomain": "인공지능"
  },
  "narrative_pattern": "대조-종합",
  "tension_curve": [1, 3, 4, 5, 3],
  
  "paragraphs": [
    {
      "id": "p1",
      "order": 1,
      "role": "intro",
      "tension_level": 1,
      "description": "인공지능 윤리의 필요성 소개",
      "contains_nodes": ["n1", "n2", "n3"],
      "primary_concept": "n1"
    },
    {
      "id": "p2",
      "order": 2,
      "role": "explain",
      "tension_level": 3,
      "description": "결과주의적 관점의 AI 윤리",
      "contains_nodes": ["n4", "n5", "n6", "n7", "n8"],
      "primary_concept": "n4"
    }
    // 추가 문단...
  ],
  
  "paragraph_edges": [
    {
      "source_id": "p1",
      "target_id": "p2",
      "type": "builds_upon"
    },
    {
      "source_id": "p2",
      "target_id": "p3",
      "type": "contrasts_with"
    }
    // 추가 문단 엣지...
  ],
  
  "nodes": [
    {
      "id": "n1",
      "label": "인공지능",
      "type": "concept",
      "tier": "core",
      "paragraph_id": "p1",
      "discourse_role": "subject"
    },
    {
      "id": "n2",
      "label": "윤리적 문제",
      "type": "concept",
      "tier": "core",
      "paragraph_id": "p1",
      "discourse_role": "claim"
    }
    // 추가 노드...
  ],
  
  "edges": [
    {
      "source_id": "n1",
      "target_id": "n2",
      "type": "Property",
      "label": "has_attribute",
      "explicitness": "explicit",
      "complexity": "low",
      "supporting_sentence": "인공지능 기술의 발전은 새로운 윤리적 문제를 제기한다."
    },
    {
      "source_id": "n4",
      "target_id": "n6",
      "type": "Evaluation",
      "label": "views_as",
      "explicitness": "implicit",
      "complexity": "high",
      "inference_basis": ["p2-s3", "p2-s4"]
    }
    // 추가 엣지...
  ]
}
```

## 12. 머메이드 시각화 표준

v6.0 개념 지도는 다음 두 가지 다이어그램으로 시각화합니다:

### 1. 문단 흐름도 (거시적 구조)

```mermaid
flowchart LR
    subgraph "텐션곡선"
        t1["1"] --> t2["3"] --> t3["4"] --> t4["5"] --> t5["3"]
    end
    
    p1["p1: 도입(1)"] --builds_upon--> p2["p2: 설명(3)"]
    p2 --contrasts_with--> p3["p3: 대조(4)"]
    p3 --synthesizes--> p4["p4: 종합(5)"]
    p4 --concludes_from--> p5["p5: 결론(3)"]
```

### 2. 개념 구조도 (미시적 구조)

```mermaid
flowchart TB
    %% 노드 정의
    n1["인공지능"] 
    n2["윤리적 문제"]
    n4["결과주의"]
    n6["행위의 결과"]
    
    %% 명시적 엣지 (실선)
    n1 -->|"has_attribute"| n2
    
    %% 암시적 엣지 (점선)
    n4 -.->|"views_as"| n6
    
    %% 스타일링
    classDef low fill:#90EE90,stroke:#000,stroke-width:1px;
    classDef medium fill:#ADD8E6,stroke:#000,stroke-width:1px;
    classDef high fill:#FFB6C1,stroke:#000,stroke-width:1px;
    
    class n1,n2 low;
    class n4 medium;
    class n6 high;
```

## 13. 품질 체크리스트

개념 지도 v6.0이 완성되면 다음 체크리스트로 품질을 검증합니다:

1. **완전성 검증**
   - [ ] 모든 주요 개념이 노드로 포함됨
   - [ ] 문단별 텐션 수치가 모두 정의됨
   - [ ] 암시적 엣지가 충분한 근거를 가짐

2. **일관성 검증**
   - [ ] 텐션 수치와 노드/엣지 분포가 일치함
   - [ ] 내러티브 패턴이 문단 역할과 일관됨
   - [ ] 개념 간 계층 구조가 논리적으로 일관됨

3. **변별력 검증**
   - [ ] 최소 30% 이상의 암시적 엣지 포함
   - [ ] 텐션 수치 4-5 문단이 1개 이상 포함
   - [ ] 고급 난이도 엣지가 25% 이상 포함

4. **출제 가능성 검증**
   - [ ] 세부 정보 파악, 추론, 적용 유형 문항 설계 가능
   - [ ] 개념 간 비교/대조를 요구하는 문항 설계 가능
   - [ ] 최소 1개 이상의 고난도 문항 설계 가능

## 부록: 엣지 타입 및 레이블 참조표

개념 엣지는 v5.0의 체계를 그대로 유지합니다:

| Type | Label | 설명 | 난이도 |
|------|-------|------|-------|
| **Hierarchy** | is_parent_of, is_child_of | 상하위 관계 | 고급 |
| **Classification** | belongs_to | 분류 관계 | 초급 |
| **Definition** | defines | 정의 관계 | 초급 |
| **Composition** | has_part | 부분-전체 관계 | 초급 |
| **Property** | has_attribute | 속성 관계 | 초급 |
| **Comparison** | is_similar_to, differs_from | 유사/대조 관계 | 중급 |
| **QuantComparison** | is_greater_than, is_less_than, is_equal_to, delta_is_positive, delta_is_negative | 수량 비교 | 고급 |
| **Causality** | causes, influences | 인과 관계 | 중급 |
| **CounterCausality** | mitigates, exacerbates | 역인과 관계 | 고급 |
| **Conditionality** | requires, depends_on | 조건 관계 | 중급 |
| **Exception** | has_exception, has_scope_limit | 예외/한계 | 고급 |
| **Temporal** | occurs_at, before, after | 시간 관계 | 중급 |
| **Spatial** | is_located_at | 공간 관계 | 중급 |
| **Purpose** | has_purpose, functions_as, uses_means | 목적 관계 | 중급 |
| **Example** | is_example_of | 예시 관계 | 초급 |
| **Reference** | refers_to, is_source_of | 참조 관계 | 중급 |
| **Evaluation** | views_as, has_stance | 평가 관계 | 고급 |
| **Argumentation** | supports, contradicts, rebuttal_of, argument_unit | 논증 관계 | 고급 |
| **Methodology** | uses_framework, is_derived_from | 방법론 관계 | 고급 |
| **Modality** | is_hypothetical, has_probability | 양태 관계 | 고급 |
