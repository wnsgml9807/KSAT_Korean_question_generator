| 파라미터       | 값                                           | 비고             |
| ---------- | ------------------------------------------- | -------------- |
| Base model | `gpt-4.1-2025-04-14`                        | 2025-Q2 공개     |
| Epochs     | 3 (*auto*)                                  | 데이터 소량, 과적합 방지 |
| Batch / LR | auto / default                              |                |
| Run ID     | `ft:gpt-4.1-…:ksat-agent-passage-editor-v2` |                |

**결과 지표**

| Metric          | 값         |
| --------------- | --------- |
| Train loss      | **0.274** |
| Valid loss      | **0.255** |
| Full valid loss | 0.302     |

(loss gap ≈ 0.02 → 안정 수렴)

---

#### ③ Inference 파라미터 (안정 preset)

```python
gen_cfg = {
    "model": "ft:gpt-4.1-ksat-agent-passage-editor-v2",
    "temperature": 0.30,
    "top_p": 0.85,
    "repetition_penalty": 1.2,
    "max_tokens": 1200,
}
```

* `temperature 0.5` : 논리 일관성↑
* `top_p 0.85`      : 기본값에 비해 보수적으로 책정하여 문체 일관성↑
* `repetition_penalty 1.2` : 꼬리 반복 현상상 90 %↓

---

#### ④ 정량적 개선 결과

| 지표                 | 프롬프트 Only | Fine-Tune 후 | 개선폭    |
| ------------------ | --------- | ----------- | ------ |
| 단락별 "정의→인과→비교" 완성률 | 38 %      | **71 %**    | +33 %p |
| 매력적 오답(값·조건 교란) 비율 | 42 %      | **88 %**    | +46 %p |
| 중복·불필요 문장 비중       | 12 %      | **3 %**     | -9 %p  |
| 수능 전문가 총점(5점 만점)   | 3.0       | **4.5**     | +1.5   |

---

#### ⑤ 주요 이슈 & 해결책

| 이슈                                 | 해결 방법                                  |
| ---------------------------------- | -------------------------------------- |
| 동일 문장, 문단 반복                       | `repetition_penalty=1.2` + Top-k 노드 필터 |
| 이상한 문자열이 출력되는 현상                      | `temperature=0.6` 하향 조정 |




---

### 7️⃣ 서버 아키텍처

#### 7.1 다중 사용자 세션 관리

다중 사용자 환경에서 각 사용자의 작업 상태를 안전하게 관리하기 위해 세 가지 핵심 요소를 도입했습니다:

| 요소 | 사용 기술 | 주요 기능 |
|------|-----------|----------|
| **대화 상태** | `MultiAgentState` (`TypedDict`) | 에이전트 간 메시지·요약·검색 결과를 단일 객체로 공유 |
| **세션 DB** | `AsyncSqliteSaver` | Stream lit 다중 사용자 환경에서 세션별 체크포인트 유지 |
| **만료 정리** | `cleanup_old_sessions()` | 24 시간 후 SQLite 파일 자동 삭제로 디스크 사용 최소화 |

이를 통해 여러 사용자가 동시에 시스템을 사용해도 각 작업이 완전히 분리되어 관리되며, 

만약 작업 중 오류가 발생하더라도 서버 DB에 저장된 세션을 불러와 마지막 체크포인트부터 작업을 재개할 수 있습니다:

```python
# 각 사용자별 독립된 세션 데이터베이스 생성
memory = await aiosqlite.connect(f"sessions/{user_id}_{timestamp}.db")
saver  = AsyncSqliteSaver(memory)
await saver.setup()          # 필요한 테이블 자동 생성

# 중요 작업 단계마다 상태 스냅샷 저장
await saver.flush(state)     # 체크포인트 생성
```


#### 7.2 실시간 스트리밍 구현

작업 시간이 5-10분 정도 소요되는 시스템에서는 사용자에게 진행 상황을 실시간으로 보여주는 것이 중요합니다. 

이를 위해 FastAPI의 스트리밍 기능과 LangGraph의 `astream` 기능을 결합했습니다:

```python
@app.post("/chat/stream")
async def chat_stream_endpoint(request: ChatRequest):
    """실시간으로 에이전트 작업 과정을 스트리밍합니다"""
    async def event_generator():
        # 각 에이전트의 작업 과정을 실시간으로 스트림으로 전송
        async for item in stream_agent_response(request):
            # 줄바꿈을 추가해 클라이언트가 각 이벤트를 구분할 수 있게 함
            yield item + "\n"
    
    # 브라우저에 지속적인 연결 유지를 위한 헤더 설정
    return StreamingResponse(
        event_generator(),
        media_type="application/json",
        headers={
            "Cache-Control": "no-cache",  # 캐싱 방지
            "Connection": "keep-alive",   # 연결 유지
        }
    )
```

이 구현을 통해 사용자는 실시간 진행 상황을 토큰 단위로 확인할 수 있습니다.

서버-클라이언트 간 데이터 전송을 위해 SSE(Server-Sent Events) 대신 단순 JSON 라인 형식을 채택하여 토큰 단위 전송-파싱 과정을 단순화했습니다.

#### 7.3 운영 환경

KSAT Agent 백엔드 시스템은 안정적이고 확장 가능한 운영을 위해 다음과 같은 환경으로 구성되어 있습니다.

*   **실행 환경**: 애플리케이션은 Docker 컨테이너로 패키징되어, GCP (Google Cloud Platform) Compute Engine VM 인스턴스에서 실행했습니다다. 이를 통해 개발 환경과 운영 환경의 일관성을 유지할 수 있게 되었습니다.

*   **프로세스 관리**: 컨테이너 내부에서는 Supervisor가 메인 애플리케이션 서버 프로세스(Uvicorn 기반 FastAPI 서버)를 관리합니다. Supervisor는 애플리케이션의 예상치 못한 종료 시 자동으로 재시작합니다.

*   **지속적 통합 및 배포 (CI/CD)**: GitHub Actions를 활용하여 CI/CD 파이프라인을 구축했습니다. GitHub에 코드가 push되면, GitHub Actions가 자동으로 VM 서버에 접속하여 최신 코드를 가져오고, Docker 이미지를 재빌드한 후 컨테이너를 재시작합니다. 

*   **인프라 구성**:
    *   **Dockerfile**: 애플리케이션 실행에 필요한 모든 종속성(Python 버전, 라이브러리 등)과 환경 설정을 정의합니다.
    *   **docker-compose.yaml**: Docker 컨테이너의 빌드 방식, 포트 매핑, 볼륨 설정, 재시작 정책 등을 정의했습니다.
    *   **supervisord.conf**: Supervisor가 관리할 프로세스의 실행 명령어, 자동 시작/재시작 정책, 로그 경로 등을 설정했습니다.
    *   **.env**: API 키와 같은 민감한 환경 변수를 관리합니다. Github에 업로드되지 않고 별도로 직접 관리합니다.

---
### 8️⃣ 맺음말

KSAT Agent는 기존 출제 프로세스를 상당 부분 효율화할 수 있을 것으로 기대합니다. 투입 비용을 낮춤으로써, 양질의 문항이 저렴한 가격에 공급될 수 있기를 바랍니다. 

KSAT Agent가 교사와 학생들에게 실질적인 이로움을 가져다 주고, 나아가 교육 콘텐츠 제작의 패러다임을 바꾸는 계기가 되면 좋겠습니다. 

감사합니다.


<br>
<br>

### :bulb: 부록 : 개념 지도 스키마 v5.0 Docs 

_상위권‧고난도 수능 독서 출제를 위한 설계_

---

#### 1. 개요 & 필요성  
고난도 독서 문항은 **단일 사실 확인**이 아닌 *다단계 추론·비판적 비교·관점 충돌*을 요구한다.  
스키마 v5.0은 이러한 문항을 **그래프 한 ∼ 두 홉** 안에서 근거를 찾고, 세 ∼ 네 홉까지 확장해 종합적 판단이 가능하도록 다음을 목표로 한다.

| 목표 | 설명 |
|------|------|
| **추론 깊이** | 인과·조건·반례·메타평가까지 4-레벨 이상 연쇄 관계 추적 가능 |
| **관점 대립** | 동일 노드에 대해 *주장·근거·반박·양보*를 구조적으로 표현 |
| **질적 비교** | "A ↔ B" 단순 비교를 넘어 *우위/열위·준거축*을 명시 |
| **검증 가능성** | 선지 판별 시 *supporting_sentence* 1-2개면 충분하도록 설계 |
| **다분야 호환** | 법·정치, 과학·기술, 철학·예술 지문 모두 공통 스키마 사용 |

---

#### 2. 주요 변경점 (v4.1 → v5.0)

| 구분 | v4.1 | v5.0 (신규·변경) |
|------|------|-----------------|
| **Edge Type 수** | 15종 | **20종** (5 종 추가) |
| **Label 수** | 27개 | **38개** |
| **다중 논증 구조** | supports / contradicts | **argument_unit**, **rebuttal_of**, **conditioned_by** 등 세분화 |
| **메타 관계** | 부재 | **stance_on**, **uses_framework** → 관점·방법론 표현 |
| **수량 비교** | is_equal_to 등 3개 | **delta_is_positive/negative** 추가 → 기울기·증감 표현 |
| **예외·한계** | 없음 | **has_exception**, **has_scope_limit** |
| **불확실성** | 없음 | **has_probability**, **is_hypothetical** |
| **노드 속성** | id/label 등 | **tier**(core/support), **discourse_role**(claim/data/warrant) 추가 |
| **JSON 스키마** | 단일 버전 | **$schema** 필드로 버전 명시, backward-compatible |

---

#### 3. 엣지 스키마 v5.0 (총 20 Type / 38 Label)

> **굵게**: v5.0 신규

| Type | Label (필수) | 설명·용례 |
|------|--------------|-----------|
| **Hierarchy** | **is_parent_of**, **is_child_of** | 학파·법조문·분류 체계 |
| Classification | belongs_to | "정신분석 이론 A belongs_to 심리학" |
| Definition | defines | "도덕 문장 defines 진리 부정" |
| Composition | has_part | "플라스틱 has_part 결정 영역" |
| Property | has_attribute | "경영 공시 has_attribute 투명성" |
| Comparison | is_similar_to, differs_from | 철학 A vs B 비교 |
| **QuantComparison** | is_greater_than, is_less_than, is_equal_to, **delta_is_positive/negative** | 지지율 증가·감소 등 |
| Causality | causes, influences | "과산화물 개시제 causes 이중 결합 파괴" |
| **CounterCausality** | **mitigates**, **exacerbates** | "사외이사 mitigates 폐쇄적 경영" |
| Conditionality | requires, depends_on | "재판매가격유지 requires 정당한 이유" |
| **Exception** | **has_exception**, **has_scope_limit** | 여론조사 공표 금지 예외(저작물) |
| Temporal | occurs_at, before, after | 오존홀 occurs_at 9-11월 |
| Spatial | is_located_at | 오존홀 is_located_at 남극 성층권 |
| Purpose | has_purpose, functions_as, uses_means | 스톡옵션 has_purpose 인센티브 |
| Example | is_example_of | 폴리에틸렌 is_example_of 열가소성 |
| Reference | refers_to, is_source_of | 문헌 간 인용 |
| Evaluation | views_as, has_stance | "바쟁 has_stance 몽타주 부정" |
| Argumentation | supports, contradicts, **rebuttal_of**, **argument_unit** | 복합 논증 트리 |
| **Methodology** | **uses_framework**, **is_derived_from** | "천두슈 uses_framework 과학 정신" |
| **Modality** | **is_hypothetical**, **has_probability** | "오존 회복 has_probability 0.8 by 2050" |

---

#### 4. 노드 메타데이터 확장

| 필드 | 형식 | 설명 |
|------|------|------|
| id | string | 고유 ID |
| label | string | 정규화된 단수 명사 |
| type | string | concept / process / actor / value 등 |
| **tier** | core / support | 핵심 채점용 vs 배경 정보 |
| **discourse_role** | claim / data / warrant / rebuttal / backing | 톤퀸 모델 기반 |
| description | string | (선택) 요약 |
| text_span | [int,int] | 원문 위치 |

---

#### 5. JSON Top-Level 구조

```json
{
  "$schema": "https://kice-graph.org/schema/v5.0",
  "graph_id": "2025_06_section_8_11",
  "document_source": {
    "title": "플라스틱 중합 과정",
    "source_file": "2025_06_section_8_11.txt",
    "sections": ["8","9","10","11"]
  },
  "nodes": [ /* … */ ],
  "edges": [ /* … */ ]
}
```

* `$schema` 필드는 파서가 v5.0을 인식하도록 필수.  
* **Backward compatibility** : v4.1 그래프를 v5.0 파서는 idempotent 변환 지원.

---

#### 6. 구축 Workflow (고난도 버전)  

1. **Micro-chunk 파싱** : 문단→문장→의미 단위로 토큰화  
2. **Core claim 선정** : tier=core 후보만 우선 그래프화  
3. **Multi-hop 연결** : 최소 2-hop으로 답이 구성되도록 엣지 설계  
4. **반례·제한** 배치 : has_exception / rebuttal_of 추가 → 판단형·보기형 선지 소재  
5. **정량-정성 믹스** : QuantComparison + Evaluation 혼합 → '△보다 크다 + 가치 판단' 선지 제작  
6. **검증 문장 링크** : 모든 edge.metadata.supporting_sentence → 원문 exact string  

---

#### 7. 고난도 출제용 패턴 가이드

| 문항 유형 | 그래프 패턴 | 예시(첨부 기출) |
|-----------|-------------|-----------------|
| 복합 추론형 | causes + has_exception + rebuttal_of | 오존홀 생성(원인) ↔ 온실가스 has_exception (성층권 온도 상승 시) |
| 시점 변동형 | before / after + delta_is_positive | 북극 2011·2020 오존 감소 before 2023 |
| 관점 대립형 | has_stance (+supports/contradicts) | 바쟁 vs 정신분석 영화 이론 |
| 조건 위배형 | requires + contradicts | 도덕 문장 진리값 requires 검증 가능 ↔ 에이어 contradicts |

---

#### 8. 품질 Checklist (5 항)

1. **근거 포함률 100 %** : 모든 core edge는 supporting_sentence 필수  
2. **다중 경로** : 정답 선지는 2 이상 경로, 오답 선지는 1 경로 or break edge  
3. **분기 균형** : 한 노드 degree 최대 7, 과도한 스타 구조 금지  
4. **용어 일관성** : 동일 개념 label 동일, 상위/하위 관계 명시  
5. **오류 로그 0** : JSON schema validation & unit-test 통과

---

#### 9. 예시 스니펫 (v5.0)

```json
{
  "nodes":[
    {"id":"n1","label":"Montage","type":"technique","tier":"core"},
    {"id":"n2","label":"Continuity of Reality","type":"property","tier":"core"},
    {"id":"n3","label":"Bazin","type":"actor","tier":"core","discourse_role":"claim"},
    {"id":"n4","label":"Disruption","type":"effect","tier":"support"}
  ],
  "edges":[
    {"source_id":"n1","target_id":"n2","type":"Comparison","label":"differs_from",
     "metadata":{"supporting_sentence":"바쟁은 몽타주가 현실의 연속성을 깨뜨린다고 보았다."}},
    {"source_id":"n1","target_id":"n4","type":"Causality","label":"causes",
     "metadata":{"supporting_sentence":"몽타주는 공간을 불연속적으로 연결해 관객에게 생소한 느낌을 준다."}},
    {"source_id":"n3","target_id":"n1","type":"Evaluation","label":"views_as",
     "metadata":{"supporting_sentence":"바쟁은 몽타주가 관객 해석을 제한한다고 비판했다."}}
  ]
}

#### ⬛︎ 결론  
스키마 v5.0은 실제 최근 수능·모의평가(2024~2025) 지문에 포함된 **"법적 예외 조항, 다층 논증, 과학-철학 교차 비교, 수치 변화"** 패턴을 모두 포괄하도록 설계됐다.  
이 스키마를 적용하면 **선지 하나에 최소 두 개 이상의 그래프 경로**가 걸리도록 구조화할 수 있어, *단순 매핑형* 오답을 걸러내고 **상위권 변별력**을 극대화할 수 있다.